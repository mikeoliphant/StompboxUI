// generated automatically
// DO NOT MODIFY!
declare id "plexi";
declare name "Plexi";
declare category "Extern";
declare shortname "Plexi";
declare description "Plexi";
declare oversample "4";

import("stdfaust.lib");

p1 = pre : fi.iir((b0/a0,b1/a0,b2/a0,b3/a0),(a1/a0,a2/a0,a3/a0)) : plexipoweramp_preclip with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;


    Volume = vslider("Volume[name:Volume]", 0.5, 0, 1, 0.01) : Inverted(0) : LogPot(3) : si.smooth(s);

    b0 = Volume*fs*(-8.7780444052674e-9*fs - 2.4329391367149e-7) + fs*(-2.19451110131685e-10*fs - 6.08234784178726e-9);

    b1 = Volume*fs*(8.7780444052674e-9*fs - 2.4329391367149e-7) + fs*(2.19451110131685e-10*fs - 6.08234784178726e-9);

    b2 = Volume*fs*(8.7780444052674e-9*fs + 2.4329391367149e-7) + fs*(2.19451110131685e-10*fs + 6.08234784178726e-9);

    b3 = Volume*fs*(-8.7780444052674e-9*fs + 2.4329391367149e-7) + fs*(-2.19451110131685e-10*fs + 6.08234784178726e-9);

    a0 = Volume*(Volume*fs*(fs*(1.93311418264457e-29*fs + 6.45290669402119e-25) + 2.74247623683688e-23) + fs*(fs*(-2.43107147356825e-29*fs - 8.11971910844529e-25) - 4.97994757198574e-23) - 6.23290053826565e-22) + fs*(fs*(5.32933796343052e-15*fs + 1.77994736282848e-10) + 1.07885862738881e-8) + 1.31411465953292e-7;

    a1 = Volume*(Volume*fs*(fs*(-5.79934254793371e-29*fs - 6.45290669402119e-25) + 2.74247623683688e-23) + fs*(fs*(7.29321442070476e-29*fs + 8.11971910844529e-25) - 4.97994757198574e-23) - 1.86987016147969e-21) + fs*(fs*(-1.59880138902915e-14*fs - 1.77994736282848e-10) + 1.07885862738881e-8) + 3.94234397859877e-7;

    a2 = Volume*(Volume*fs*(fs*(5.79934254793371e-29*fs - 6.45290669402119e-25) - 2.74247623683688e-23) + fs*(fs*(-7.29321442070476e-29*fs + 8.11971910844529e-25) + 4.97994757198574e-23) - 1.86987016147969e-21) + fs*(fs*(1.59880138902915e-14*fs - 1.77994736282848e-10) - 1.07885862738881e-8) + 3.94234397859877e-7;

    a3 = Volume*(Volume*fs*(fs*(-1.93311418264457e-29*fs + 6.45290669402119e-25) - 2.74247623683688e-23) + fs*(fs*(2.43107147356825e-29*fs - 8.11971910844529e-25) + 4.97994757198574e-23) - 6.23290053826565e-22) + fs*(fs*(-5.32933796343052e-15*fs + 1.77994736282848e-10) - 1.07885862738881e-8) + 1.31411465953292e-7;
};

plexipoweramp_preclip = _<: ba.if(signbit(_), plexipoweramp_pre_neg_clip, plexipoweramp_pre_clip) :>_ with {

    signbit = ffunction(int signbit(float), "math.h", "");

    plexipoweramp_pre_clip = ffunction(float plexipoweramp_preclip(float), "plexipoweramp_pre_table.h", "");

    plexipoweramp_pre_neg_clip = ffunction(float plexipoweramp_pre_negclip(float), "plexipoweramp_pre_neg_table.h", "");

};

p2 = pre : fi.iir((b0/a0,b1/a0,b2/a0,b3/a0,b4/a0,b5/a0),(a1/a0,a2/a0,a3/a0,a4/a0,a5/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;


    Master = vslider("Master[name:Master]", 0.5, 0, 1, 0.01) : Inverted(0) : LogPot(3) : si.smooth(s);


    Bass = vslider("Bass[name:Bass]", 0.5, 0, 1, 0.01) : Inverted(0) : si.smooth(s);


    Treble = vslider("Treble[name:Treble]", 0.5, 0, 1, 0.01) : Inverted(0) : si.smooth(s);


    Mid = vslider("Mid[name:Mid]", 0.5, 0, 1, 0.01) : Inverted(0) : si.smooth(s);

    b0 = Bass*(Master*Mid*pow(fs,2)*(fs*(-4.73062625624092e-18*fs - 2.13378560318615e-14) - 1.53298984838396e-11) + Master*fs*(fs*(-4.80204913900459e-15*fs - 1.98477279602486e-11) - 1.39362713489451e-8)) + Master*fs*(fs*(-1.24853277614119e-16*fs - 5.16040926966463e-13) - 3.62343055072572e-10) + Mid*(Master*Mid*pow(fs,2)*(fs*(1.18265656406023e-19*fs + 5.33446400796538e-16) + 3.83247462095989e-13) + Master*fs*(fs*(fs*(-1.22996282662264e-19*fs - 6.49761494546054e-16) - 8.63652414138443e-13) - 3.40664410751991e-10)) + Treble*(Bass*Master*pow(fs,3)*(-5.51627796664135e-18*fs - 4.9464472441189e-15) + Master*Mid*pow(fs,3)*(1.37906949166034e-19*fs + 1.23661181102973e-16) + Master*fs*(fs*(fs*(-1.43423227132675e-19*fs - 3.79347535921698e-16) - 3.11181454475999e-13) - 7.74237297163615e-11));

    b1 = Bass*(Master*Mid*pow(fs,2)*(fs*(1.41918787687228e-17*fs + 2.13378560318615e-14) - 1.53298984838396e-11) + Master*fs*(fs*(4.80204913900459e-15*fs - 1.98477279602486e-11) - 4.18088140468352e-8)) + Master*fs*(fs*(1.24853277614119e-16*fs - 5.16040926966463e-13) - 1.08702916521772e-9) + Mid*(Master*Mid*pow(fs,2)*(fs*(-3.54796969218069e-19*fs - 5.33446400796538e-16) + 3.83247462095989e-13) + Master*fs*(fs*(fs*(3.68988847986792e-19*fs + 6.49761494546054e-16) - 8.63652414138443e-13) - 1.02199323225597e-9)) + Treble*(Bass*Master*pow(fs,3)*(1.65488338999241e-17*fs + 4.9464472441189e-15) + Master*Mid*pow(fs,3)*(-4.13720847498101e-19*fs - 1.23661181102973e-16) + Master*fs*(fs*(fs*(4.30269681398026e-19*fs + 3.79347535921698e-16) - 3.11181454475999e-13) - 2.32271189149085e-10));

    b2 = Bass*(Master*Mid*pow(fs,2)*(fs*(-9.46125251248183e-18*fs + 4.26757120637231e-14) + 3.06597969676792e-11) + Master*fs*(fs*(9.60409827800919e-15*fs + 3.96954559204971e-11) - 2.78725426978901e-8)) + Master*fs*(fs*(2.49706555228239e-16*fs + 1.03208185393293e-12) - 7.24686110145144e-10) + Mid*(Master*Mid*pow(fs,2)*(fs*(2.36531312812046e-19*fs - 1.06689280159308e-15) - 7.66494924191979e-13) + Master*fs*(fs*(fs*(-2.45992565324528e-19*fs + 1.29952298909211e-15) + 1.72730482827689e-12) - 6.81328821503981e-10)) + Treble*(Bass*Master*pow(fs,3)*(-1.10325559332827e-17*fs + 9.89289448823781e-15) + Master*Mid*pow(fs,3)*(2.75813898332068e-19*fs - 2.47322362205945e-16) + Master*fs*(fs*(fs*(-2.8684645426535e-19*fs + 7.58695071843397e-16) + 6.22362908951999e-13) - 1.54847459432723e-10));

    b3 = Bass*(Master*Mid*pow(fs,2)*(fs*(-9.46125251248183e-18*fs - 4.26757120637231e-14) + 3.06597969676792e-11) + Master*fs*(fs*(-9.60409827800919e-15*fs + 3.96954559204971e-11) + 2.78725426978901e-8)) + Master*fs*(fs*(-2.49706555228239e-16*fs + 1.03208185393293e-12) + 7.24686110145144e-10) + Mid*(Master*Mid*pow(fs,2)*(fs*(2.36531312812046e-19*fs + 1.06689280159308e-15) - 7.66494924191979e-13) + Master*fs*(fs*(fs*(-2.45992565324528e-19*fs - 1.29952298909211e-15) + 1.72730482827689e-12) + 6.81328821503981e-10)) + Treble*(Bass*Master*pow(fs,3)*(-1.10325559332827e-17*fs - 9.89289448823781e-15) + Master*Mid*pow(fs,3)*(2.75813898332068e-19*fs + 2.47322362205945e-16) + Master*fs*(fs*(fs*(-2.8684645426535e-19*fs - 7.58695071843397e-16) + 6.22362908951999e-13) + 1.54847459432723e-10));

    b4 = Bass*(Master*Mid*pow(fs,2)*(fs*(1.41918787687228e-17*fs - 2.13378560318615e-14) - 1.53298984838396e-11) + Master*fs*(fs*(-4.80204913900459e-15*fs - 1.98477279602486e-11) + 4.18088140468352e-8)) + Master*fs*(fs*(-1.24853277614119e-16*fs - 5.16040926966463e-13) + 1.08702916521772e-9) + Mid*(Master*Mid*pow(fs,2)*(fs*(-3.54796969218069e-19*fs + 5.33446400796538e-16) + 3.83247462095989e-13) + Master*fs*(fs*(fs*(3.68988847986792e-19*fs - 6.49761494546054e-16) - 8.63652414138443e-13) + 1.02199323225597e-9)) + Treble*(Bass*Master*pow(fs,3)*(1.65488338999241e-17*fs - 4.9464472441189e-15) + Master*Mid*pow(fs,3)*(-4.13720847498101e-19*fs + 1.23661181102973e-16) + Master*fs*(fs*(fs*(4.30269681398026e-19*fs - 3.79347535921698e-16) - 3.11181454475999e-13) + 2.32271189149085e-10));

    b5 = Bass*(Master*Mid*pow(fs,2)*(fs*(-4.73062625624092e-18*fs + 2.13378560318615e-14) - 1.53298984838396e-11) + Master*fs*(fs*(4.80204913900459e-15*fs - 1.98477279602486e-11) + 1.39362713489451e-8)) + Master*fs*(fs*(1.24853277614119e-16*fs - 5.16040926966463e-13) + 3.62343055072572e-10) + Mid*(Master*Mid*pow(fs,2)*(fs*(1.18265656406023e-19*fs - 5.33446400796538e-16) + 3.83247462095989e-13) + Master*fs*(fs*(fs*(-1.22996282662264e-19*fs + 6.49761494546054e-16) - 8.63652414138443e-13) + 3.40664410751991e-10)) + Treble*(Bass*Master*pow(fs,3)*(-5.51627796664135e-18*fs + 4.9464472441189e-15) + Master*Mid*pow(fs,3)*(1.37906949166034e-19*fs - 1.23661181102973e-16) + Master*fs*(fs*(fs*(-1.43423227132675e-19*fs + 3.79347535921698e-16) - 3.11181454475999e-13) + 7.74237297163615e-11));

    a0 = Bass*(Mid*fs*(fs*(fs*(fs*(2.28456025356298e-24*fs + 8.76319733257222e-20) + 3.94339005532112e-16) + 3.89363019691219e-13) + 8.20094005875433e-12) + fs*(fs*(fs*(fs*(2.62747684669764e-24*fs + 1.04079855336218e-19) + 5.75493421557123e-16) + 8.63729385824201e-13) + 3.64948853049297e-10) + 7.45540005341303e-9) + Mid*(Mid*fs*(fs*(fs*(fs*(-5.71140063390745e-26*fs - 2.19079933314305e-21) - 9.85847513830281e-18) - 9.73407549228048e-15) - 2.05023501468858e-13) + fs*(fs*(fs*(fs*(-6.28835457480362e-27*fs - 2.19721429047455e-22) - 1.5631404324923e-19) + 6.2748567015164e-15) + 8.41416450028194e-12)) + Treble*(Bass*(Mid*pow(fs,2)*(fs*(fs*(4.25349393224233e-25*fs + 1.66811693447134e-20) + 8.60733444102465e-17) + 8.8160105631609e-14) + fs*(fs*(fs*(fs*(6.56869211674411e-25*fs + 2.57532797835268e-20) + 1.34405150727257e-16) + 1.9631006367053e-13) + 8.014555057419e-11)) + Mid*(Mid*pow(fs,2)*(fs*(fs*(-1.06337348306058e-26*fs - 4.17029233617835e-22) - 2.15183361025616e-18) - 2.20400264079023e-15) + fs*(fs*(fs*(fs*(-5.36264606803021e-27*fs - 1.90787528297247e-22) - 3.62974376641359e-19) + 1.33198267673638e-15) + 2.05023501468858e-12)) + Treble*(Bass*(Mid*pow(fs,3)*(fs*(-4.90033863161559e-25*fs - 1.70110396602325e-20) - 2.25525851615744e-17) + pow(fs,2)*(fs*(fs*(-6.55700275611026e-25*fs - 2.32082150835733e-20) - 4.56663781668224e-17) - 2.05023501468858e-14)) + Mid*(Mid*pow(fs,3)*(fs*(1.2250846579039e-26*fs + 4.25275991505813e-22) + 5.6381462903936e-19) + pow(fs,2)*(fs*(fs*(3.65162644807511e-27*fs + 1.15644079415944e-22) - 2.17936835495489e-19) - 5.12558753672146e-16)) + fs*(fs*(fs*(fs*(-1.70482071658867e-26*fs - 6.33218150155226e-22) - 2.23212003317829e-18) - 2.25733780437227e-15) - 4.65962503338314e-13)) + fs*(fs*(fs*(fs*(1.70785995035347e-26*fs + 6.99442965811442e-22) + 4.66041359273551e-18) + 1.1010746153663e-14) + 9.44774697635675e-12) + 1.86385001335326e-9) + fs*(fs*(fs*(fs*(6.83143980141387e-26*fs + 2.82550700450066e-21) + 1.96263476557925e-17) + 4.60837020243462e-14) + 3.8944520824993e-11) + 7.64924045480176e-9;

    a1 = Bass*(Mid*fs*(fs*(fs*(fs*(-1.14228012678149e-23*fs - 2.62895919977167e-19) - 3.94339005532112e-16) + 3.89363019691219e-13) + 2.4602820176263e-11) + fs*(fs*(fs*(fs*(-1.31373842334882e-23*fs - 3.12239566008655e-19) - 5.75493421557123e-16) + 8.63729385824201e-13) + 1.09484655914789e-9) + 3.72770002670651e-8) + Mid*(Mid*fs*(fs*(fs*(fs*(2.85570031695372e-25*fs + 6.57239799942916e-21) + 9.85847513830281e-18) - 9.73407549228048e-15) - 6.15070504406575e-13) + fs*(fs*(fs*(fs*(3.14417728740181e-26*fs + 6.59164287142364e-22) + 1.5631404324923e-19) + 6.2748567015164e-15) + 2.52424935008458e-11)) + Treble*(Bass*(Mid*pow(fs,2)*(fs*(fs*(-2.12674696612117e-24*fs - 5.00435080341401e-20) - 8.60733444102465e-17) + 8.8160105631609e-14) + fs*(fs*(fs*(fs*(-3.28434605837205e-24*fs - 7.72598393505803e-20) - 1.34405150727257e-16) + 1.9631006367053e-13) + 2.4043665172257e-10)) + Mid*(Mid*pow(fs,2)*(fs*(fs*(5.31686741530291e-26*fs + 1.2510877008535e-21) + 2.15183361025616e-18) - 2.20400264079023e-15) + fs*(fs*(fs*(fs*(2.68132303401511e-26*fs + 5.72362584891742e-22) + 3.62974376641359e-19) + 1.33198267673638e-15) + 6.15070504406575e-12)) + Treble*(Bass*(Mid*pow(fs,3)*(fs*(2.45016931580779e-24*fs + 5.10331189806976e-20) + 2.25525851615744e-17) + pow(fs,2)*(fs*(fs*(3.27850137805513e-24*fs + 6.962464525072e-20) + 4.56663781668224e-17) - 2.05023501468858e-14)) + Mid*(Mid*pow(fs,3)*(fs*(-6.12542328951948e-26*fs - 1.27582797451744e-21) - 5.6381462903936e-19) + pow(fs,2)*(fs*(fs*(-1.82581322403755e-26*fs - 3.46932238247832e-22) + 2.17936835495489e-19) - 5.12558753672146e-16)) + fs*(fs*(fs*(fs*(8.52410358294333e-26*fs + 1.89965445046568e-21) + 2.23212003317829e-18) - 2.25733780437227e-15) - 1.39788751001494e-12)) + fs*(fs*(fs*(fs*(-8.53929975176734e-26*fs - 2.09832889743433e-21) - 4.66041359273551e-18) + 1.1010746153663e-14) + 2.83432409290702e-11) + 9.31925006676628e-9) + fs*(fs*(fs*(fs*(-3.41571990070694e-25*fs - 8.47652101350198e-21) - 1.96263476557925e-17) + 4.60837020243462e-14) + 1.16833562474979e-10) + 3.82462022740088e-8;

    a2 = Bass*(Mid*fs*(fs*(fs*(fs*(2.28456025356298e-23*fs + 1.75263946651444e-19) - 7.88678011064225e-16) - 7.78726039382438e-13) + 1.64018801175087e-11) + fs*(fs*(fs*(fs*(2.62747684669764e-23*fs + 2.08159710672437e-19) - 1.15098684311425e-15) - 1.7274587716484e-12) + 7.29897706098595e-10) + 7.45540005341303e-8) + Mid*(Mid*fs*(fs*(fs*(fs*(-5.71140063390745e-25*fs - 4.38159866628611e-21) + 1.97169502766056e-17) + 1.9468150984561e-14) - 4.10047002937716e-13) + fs*(fs*(fs*(fs*(-6.28835457480362e-26*fs - 4.39442858094909e-22) + 3.12628086498461e-19) - 1.25497134030328e-14) + 1.68283290005639e-11)) + Treble*(Bass*(Mid*pow(fs,2)*(fs*(fs*(4.25349393224233e-24*fs + 3.33623386894268e-20) - 1.72146688820493e-16) - 1.76320211263218e-13) + fs*(fs*(fs*(fs*(6.56869211674411e-24*fs + 5.15065595670536e-20) - 2.68810301454515e-16) - 3.9262012734106e-13) + 1.6029110114838e-10)) + Mid*(Mid*pow(fs,2)*(fs*(fs*(-1.06337348306058e-25*fs - 8.34058467235669e-22) + 4.30366722051232e-18) + 4.40800528158045e-15) + fs*(fs*(fs*(fs*(-5.36264606803021e-26*fs - 3.81575056594495e-22) + 7.25948753282719e-19) - 2.66396535347277e-15) + 4.10047002937716e-12)) + Treble*(Bass*(Mid*pow(fs,3)*(fs*(-4.90033863161559e-24*fs - 3.40220793204651e-20) + 4.51051703231488e-17) + pow(fs,2)*(fs*(fs*(-6.55700275611025e-24*fs - 4.64164301671467e-20) + 9.13327563336449e-17) + 4.10047002937716e-14)) + Mid*(Mid*pow(fs,3)*(fs*(1.2250846579039e-25*fs + 8.50551983011626e-22) - 1.12762925807872e-18) + pow(fs,2)*(fs*(fs*(3.65162644807511e-26*fs + 2.31288158831888e-22) + 4.35873670990977e-19) + 1.02511750734429e-15)) + fs*(fs*(fs*(fs*(-1.70482071658867e-25*fs - 1.26643630031045e-21) + 4.46424006635657e-18) + 4.51467560874454e-15) - 9.31925006676628e-13)) + fs*(fs*(fs*(fs*(1.70785995035347e-25*fs + 1.39888593162288e-21) - 9.32082718547102e-18) - 2.20214923073261e-14) + 1.88954939527135e-11) + 1.86385001335326e-8) + fs*(fs*(fs*(fs*(6.83143980141387e-25*fs + 5.65101400900132e-21) - 3.92526953115849e-17) - 9.21674040486925e-14) + 7.78890416499859e-11) + 7.64924045480177e-8;

    a3 = Bass*(Mid*fs*(fs*(fs*(fs*(-2.28456025356298e-23*fs + 1.75263946651444e-19) + 7.88678011064225e-16) - 7.78726039382438e-13) - 1.64018801175087e-11) + fs*(fs*(fs*(fs*(-2.62747684669764e-23*fs + 2.08159710672437e-19) + 1.15098684311425e-15) - 1.7274587716484e-12) - 7.29897706098595e-10) + 7.45540005341303e-8) + Mid*(Mid*fs*(fs*(fs*(fs*(5.71140063390745e-25*fs - 4.38159866628611e-21) - 1.97169502766056e-17) + 1.9468150984561e-14) + 4.10047002937716e-13) + fs*(fs*(fs*(fs*(6.28835457480362e-26*fs - 4.39442858094909e-22) - 3.12628086498461e-19) - 1.25497134030328e-14) - 1.68283290005639e-11)) + Treble*(Bass*(Mid*pow(fs,2)*(fs*(fs*(-4.25349393224233e-24*fs + 3.33623386894268e-20) + 1.72146688820493e-16) - 1.76320211263218e-13) + fs*(fs*(fs*(fs*(-6.56869211674411e-24*fs + 5.15065595670536e-20) + 2.68810301454515e-16) - 3.9262012734106e-13) - 1.6029110114838e-10)) + Mid*(Mid*pow(fs,2)*(fs*(fs*(1.06337348306058e-25*fs - 8.34058467235669e-22) - 4.30366722051232e-18) + 4.40800528158045e-15) + fs*(fs*(fs*(fs*(5.36264606803021e-26*fs - 3.81575056594495e-22) - 7.25948753282719e-19) - 2.66396535347277e-15) - 4.10047002937716e-12)) + Treble*(Bass*(Mid*pow(fs,3)*(fs*(4.90033863161559e-24*fs - 3.40220793204651e-20) - 4.51051703231488e-17) + pow(fs,2)*(fs*(fs*(6.55700275611025e-24*fs - 4.64164301671467e-20) - 9.13327563336449e-17) + 4.10047002937716e-14)) + Mid*(Mid*pow(fs,3)*(fs*(-1.2250846579039e-25*fs + 8.50551983011626e-22) + 1.12762925807872e-18) + pow(fs,2)*(fs*(fs*(-3.65162644807511e-26*fs + 2.31288158831888e-22) - 4.35873670990977e-19) + 1.02511750734429e-15)) + fs*(fs*(fs*(fs*(1.70482071658867e-25*fs - 1.26643630031045e-21) - 4.46424006635657e-18) + 4.51467560874454e-15) + 9.31925006676628e-13)) + fs*(fs*(fs*(fs*(-1.70785995035347e-25*fs + 1.39888593162288e-21) + 9.32082718547102e-18) - 2.20214923073261e-14) - 1.88954939527135e-11) + 1.86385001335326e-8) + fs*(fs*(fs*(fs*(-6.83143980141387e-25*fs + 5.65101400900132e-21) + 3.92526953115849e-17) - 9.21674040486925e-14) - 7.78890416499859e-11) + 7.64924045480177e-8;

    a4 = Bass*(Mid*fs*(fs*(fs*(fs*(1.14228012678149e-23*fs - 2.62895919977167e-19) + 3.94339005532112e-16) + 3.89363019691219e-13) - 2.4602820176263e-11) + fs*(fs*(fs*(fs*(1.31373842334882e-23*fs - 3.12239566008655e-19) + 5.75493421557123e-16) + 8.63729385824201e-13) - 1.09484655914789e-9) + 3.72770002670651e-8) + Mid*(Mid*fs*(fs*(fs*(fs*(-2.85570031695372e-25*fs + 6.57239799942916e-21) - 9.85847513830281e-18) - 9.73407549228048e-15) + 6.15070504406575e-13) + fs*(fs*(fs*(fs*(-3.14417728740181e-26*fs + 6.59164287142364e-22) - 1.5631404324923e-19) + 6.2748567015164e-15) - 2.52424935008458e-11)) + Treble*(Bass*(Mid*pow(fs,2)*(fs*(fs*(2.12674696612117e-24*fs - 5.00435080341401e-20) + 8.60733444102465e-17) + 8.8160105631609e-14) + fs*(fs*(fs*(fs*(3.28434605837205e-24*fs - 7.72598393505803e-20) + 1.34405150727257e-16) + 1.9631006367053e-13) - 2.4043665172257e-10)) + Mid*(Mid*pow(fs,2)*(fs*(fs*(-5.31686741530291e-26*fs + 1.2510877008535e-21) - 2.15183361025616e-18) - 2.20400264079023e-15) + fs*(fs*(fs*(fs*(-2.68132303401511e-26*fs + 5.72362584891742e-22) - 3.62974376641359e-19) + 1.33198267673638e-15) - 6.15070504406575e-12)) + Treble*(Bass*(Mid*pow(fs,3)*(fs*(-2.45016931580779e-24*fs + 5.10331189806976e-20) - 2.25525851615744e-17) + pow(fs,2)*(fs*(fs*(-3.27850137805513e-24*fs + 6.962464525072e-20) - 4.56663781668224e-17) - 2.05023501468858e-14)) + Mid*(Mid*pow(fs,3)*(fs*(6.12542328951948e-26*fs - 1.27582797451744e-21) + 5.6381462903936e-19) + pow(fs,2)*(fs*(fs*(1.82581322403755e-26*fs - 3.46932238247832e-22) - 2.17936835495489e-19) - 5.12558753672146e-16)) + fs*(fs*(fs*(fs*(-8.52410358294333e-26*fs + 1.89965445046568e-21) - 2.23212003317829e-18) - 2.25733780437227e-15) + 1.39788751001494e-12)) + fs*(fs*(fs*(fs*(8.53929975176734e-26*fs - 2.09832889743433e-21) + 4.66041359273551e-18) + 1.1010746153663e-14) - 2.83432409290702e-11) + 9.31925006676628e-9) + fs*(fs*(fs*(fs*(3.41571990070694e-25*fs - 8.47652101350198e-21) + 1.96263476557925e-17) + 4.60837020243462e-14) - 1.16833562474979e-10) + 3.82462022740088e-8;

    a5 = Bass*(Mid*fs*(fs*(fs*(fs*(-2.28456025356298e-24*fs + 8.76319733257222e-20) - 3.94339005532112e-16) + 3.89363019691219e-13) - 8.20094005875433e-12) + fs*(fs*(fs*(fs*(-2.62747684669764e-24*fs + 1.04079855336218e-19) - 5.75493421557123e-16) + 8.63729385824201e-13) - 3.64948853049297e-10) + 7.45540005341303e-9) + Mid*(Mid*fs*(fs*(fs*(fs*(5.71140063390745e-26*fs - 2.19079933314305e-21) + 9.85847513830281e-18) - 9.73407549228048e-15) + 2.05023501468858e-13) + fs*(fs*(fs*(fs*(6.28835457480362e-27*fs - 2.19721429047455e-22) + 1.5631404324923e-19) + 6.2748567015164e-15) - 8.41416450028194e-12)) + Treble*(Bass*(Mid*pow(fs,2)*(fs*(fs*(-4.25349393224233e-25*fs + 1.66811693447134e-20) - 8.60733444102465e-17) + 8.8160105631609e-14) + fs*(fs*(fs*(fs*(-6.56869211674411e-25*fs + 2.57532797835268e-20) - 1.34405150727257e-16) + 1.9631006367053e-13) - 8.014555057419e-11)) + Mid*(Mid*pow(fs,2)*(fs*(fs*(1.06337348306058e-26*fs - 4.17029233617835e-22) + 2.15183361025616e-18) - 2.20400264079023e-15) + fs*(fs*(fs*(fs*(5.36264606803021e-27*fs - 1.90787528297247e-22) + 3.62974376641359e-19) + 1.33198267673638e-15) - 2.05023501468858e-12)) + Treble*(Bass*(Mid*pow(fs,3)*(fs*(4.90033863161559e-25*fs - 1.70110396602325e-20) + 2.25525851615744e-17) + pow(fs,2)*(fs*(fs*(6.55700275611026e-25*fs - 2.32082150835733e-20) + 4.56663781668224e-17) - 2.05023501468858e-14)) + Mid*(Mid*pow(fs,3)*(fs*(-1.2250846579039e-26*fs + 4.25275991505813e-22) - 5.6381462903936e-19) + pow(fs,2)*(fs*(fs*(-3.65162644807511e-27*fs + 1.15644079415944e-22) + 2.17936835495489e-19) - 5.12558753672146e-16)) + fs*(fs*(fs*(fs*(1.70482071658867e-26*fs - 6.33218150155226e-22) + 2.23212003317829e-18) - 2.25733780437227e-15) + 4.65962503338314e-13)) + fs*(fs*(fs*(fs*(-1.70785995035347e-26*fs + 6.99442965811442e-22) - 4.66041359273551e-18) + 1.1010746153663e-14) - 9.44774697635675e-12) + 1.86385001335326e-9) + fs*(fs*(fs*(fs*(-6.83143980141387e-26*fs + 2.82550700450066e-21) - 1.96263476557925e-17) + 4.60837020243462e-14) - 3.8944520824993e-11) + 7.64924045480176e-9;
};

p3 = pre : fi.iir((b0/a0,b1/a0,b2/a0,b3/a0,b4/a0,b5/a0),(a1/a0,a2/a0,a3/a0,a4/a0,a5/a0)) : plexipowerampclip with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;



    Presense = vslider("Presense[name:Presense]", 0.5, 0, 1, 0.01) : Inverted(1) : si.smooth(s);

    b0 = Presense*(Presense*pow(fs,2)*(fs*(fs*(-2.3334608448669e-23*fs - 2.91538144925964e-21) - 1.8478317276844e-22) - 1.62773154056433e-22) + pow(fs,2)*(fs*(fs*(2.38012186177351e-23*fs + 2.97367316646687e-21) + 1.87744471107996e-22) + 1.62773154056433e-22)) + fs*(fs*(fs*(2.38012186177351e-20*fs + 2.97367316646687e-18) + 1.87744471107996e-19) + 1.62773154056433e-19);

    b1 = Presense*(Presense*pow(fs,2)*(fs*(fs*(1.16673042243345e-22*fs + 8.74614434777892e-21) + 1.8478317276844e-22) - 1.62773154056433e-22) + pow(fs,2)*(fs*(fs*(-1.19006093088676e-22*fs - 8.9210194994006e-21) - 1.87744471107996e-22) + 1.62773154056433e-22)) + fs*(fs*(fs*(-7.14036558532053e-20*fs - 2.97367316646687e-18) + 1.87744471107996e-19) + 4.88319462169298e-19);

    b2 = Presense*(Presense*pow(fs,2)*(fs*(fs*(-2.3334608448669e-22*fs - 5.83076289851928e-21) + 3.69566345536879e-22) + 3.25546308112866e-22) + pow(fs,2)*(fs*(fs*(2.38012186177351e-22*fs + 5.94734633293373e-21) - 3.75488942215992e-22) - 3.25546308112866e-22)) + fs*(fs*(fs*(4.76024372354702e-20*fs - 5.94734633293373e-18) - 3.75488942215992e-19) + 3.25546308112866e-19);

    b3 = Presense*(Presense*pow(fs,2)*(fs*(fs*(2.3334608448669e-22*fs - 5.83076289851928e-21) - 3.69566345536879e-22) + 3.25546308112866e-22) + pow(fs,2)*(fs*(fs*(-2.38012186177351e-22*fs + 5.94734633293373e-21) + 3.75488942215992e-22) - 3.25546308112866e-22)) + fs*(fs*(fs*(4.76024372354702e-20*fs + 5.94734633293373e-18) - 3.75488942215992e-19) - 3.25546308112866e-19);

    b4 = Presense*(Presense*pow(fs,2)*(fs*(fs*(-1.16673042243345e-22*fs + 8.74614434777892e-21) - 1.8478317276844e-22) - 1.62773154056433e-22) + pow(fs,2)*(fs*(fs*(1.19006093088676e-22*fs - 8.9210194994006e-21) + 1.87744471107996e-22) + 1.62773154056433e-22)) + fs*(fs*(fs*(-7.14036558532053e-20*fs + 2.97367316646687e-18) + 1.87744471107996e-19) - 4.88319462169298e-19);

    b5 = Presense*(Presense*pow(fs,2)*(fs*(fs*(2.3334608448669e-23*fs - 2.91538144925964e-21) + 1.8478317276844e-22) - 1.62773154056433e-22) + pow(fs,2)*(fs*(fs*(-2.38012186177351e-23*fs + 2.97367316646687e-21) - 1.87744471107996e-22) + 1.62773154056433e-22)) + fs*(fs*(fs*(2.38012186177351e-20*fs - 2.97367316646687e-18) + 1.87744471107996e-19) - 1.62773154056433e-19);

    a0 = Presense*(Presense*fs*(fs*(fs*(fs*(-8.60995185091346e-24*fs - 1.10853855898189e-20) - 2.32580925010789e-18) - 1.35252203100558e-16) - 1.14107022001133e-16) + fs*(fs*(fs*(fs*(1.15287202864694e-23*fs + 1.1978459678459e-20) + 2.41360758290699e-18) + 1.37991531166445e-16) + 1.16387813873793e-16)) + fs*(fs*(fs*(1.15287202864694e-20*fs + 1.1978459678459e-17) + 2.41360758290699e-15) + 1.37991531166445e-13) + 1.16387813873793e-13;

    a1 = Presense*(Presense*fs*(fs*(fs*(fs*(4.30497592545673e-23*fs + 3.32561567694566e-20) + 2.32580925010789e-18) - 1.35252203100558e-16) - 3.42321066003398e-16) + fs*(fs*(fs*(fs*(-5.76436014323472e-23*fs - 3.59353790353771e-20) - 2.41360758290699e-18) + 1.37991531166445e-16) + 3.4916344162138e-16)) + fs*(fs*(fs*(-3.45861608594083e-20*fs - 1.1978459678459e-17) + 2.41360758290699e-15) + 4.13974593499336e-13) + 5.81939069368967e-13;

    a2 = Presense*(Presense*fs*(fs*(fs*(fs*(-8.60995185091346e-23*fs - 2.21707711796377e-20) + 4.65161850021578e-18) + 2.70504406201115e-16) - 2.28214044002265e-16) + fs*(fs*(fs*(fs*(1.15287202864694e-22*fs + 2.39569193569181e-20) - 4.82721516581398e-18) - 2.75983062332891e-16) + 2.32775627747587e-16)) + fs*(fs*(fs*(2.30574405729389e-20*fs - 2.3956919356918e-17) - 4.82721516581398e-15) + 2.75983062332891e-13) + 1.16387813873793e-12;

    a3 = Presense*(Presense*fs*(fs*(fs*(fs*(8.60995185091346e-23*fs - 2.21707711796377e-20) - 4.65161850021578e-18) + 2.70504406201115e-16) + 2.28214044002265e-16) + fs*(fs*(fs*(fs*(-1.15287202864694e-22*fs + 2.39569193569181e-20) + 4.82721516581398e-18) - 2.75983062332891e-16) - 2.32775627747587e-16)) + fs*(fs*(fs*(2.30574405729389e-20*fs + 2.3956919356918e-17) - 4.82721516581398e-15) - 2.75983062332891e-13) + 1.16387813873793e-12;

    a4 = Presense*(Presense*fs*(fs*(fs*(fs*(-4.30497592545673e-23*fs + 3.32561567694566e-20) - 2.32580925010789e-18) - 1.35252203100558e-16) + 3.42321066003398e-16) + fs*(fs*(fs*(fs*(5.76436014323472e-23*fs - 3.59353790353771e-20) + 2.41360758290699e-18) + 1.37991531166445e-16) - 3.4916344162138e-16)) + fs*(fs*(fs*(-3.45861608594083e-20*fs + 1.1978459678459e-17) + 2.41360758290699e-15) - 4.13974593499336e-13) + 5.81939069368967e-13;

    a5 = Presense*(Presense*fs*(fs*(fs*(fs*(8.60995185091346e-24*fs - 1.10853855898189e-20) + 2.32580925010789e-18) - 1.35252203100558e-16) + 1.14107022001133e-16) + fs*(fs*(fs*(fs*(-1.15287202864694e-23*fs + 1.1978459678459e-20) - 2.41360758290699e-18) + 1.37991531166445e-16) - 1.16387813873793e-16)) + fs*(fs*(fs*(1.15287202864694e-20*fs - 1.1978459678459e-17) + 2.41360758290699e-15) - 1.37991531166445e-13) + 1.16387813873793e-13;
};

plexipowerampclip = _<: ba.if(signbit(_), plexipoweramp_neg_clip, plexipoweramp_clip) :>_ with {

    signbit = ffunction(int signbit(float), "math.h", "");

    plexipoweramp_clip = ffunction(float plexipowerampclip(float), "plexipoweramp_table.h", "");

    plexipoweramp_neg_clip = ffunction(float plexipoweramp_negclip(float), "plexipoweramp_neg_table.h", "");

};

p4 = pre : fi.iir((b0/a0,b1/a0,b2/a0,b3/a0,b4/a0,b5/a0),(a1/a0,a2/a0,a3/a0,a4/a0,a5/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;


    b0 = pow(fs,2)*(fs*(3.76929357077285e-20*fs + 1.36178461848655e-16) + 8.91098277318593e-14);

    b1 = pow(fs,2)*(fs*(-1.13078807123185e-19*fs - 1.36178461848655e-16) + 8.91098277318593e-14);

    b2 = pow(fs,2)*(fs*(7.53858714154569e-20*fs - 2.72356923697309e-16) - 1.78219655463719e-13);

    b3 = pow(fs,2)*(fs*(7.53858714154569e-20*fs + 2.72356923697309e-16) - 1.78219655463719e-13);

    b4 = pow(fs,2)*(fs*(-1.13078807123185e-19*fs + 1.36178461848655e-16) + 8.91098277318593e-14);

    b5 = pow(fs,2)*(fs*(3.76929357077285e-20*fs - 1.36178461848655e-16) + 8.91098277318593e-14);

    a0 = fs*(fs*(fs*(fs*(2.92233252024476e-24*fs + 4.442247247582e-20) + 1.73429527725774e-16) + 1.64983504337994e-13) + 1.05419773032574e-10) + 1.39026436464115e-8;

    a1 = fs*(fs*(fs*(fs*(-1.46116626012238e-23*fs - 1.3326741742746e-19) - 1.73429527725774e-16) + 1.64983504337994e-13) + 3.16259319097723e-10) + 6.95132182320574e-8;

    a2 = fs*(fs*(fs*(fs*(2.92233252024476e-23*fs + 8.884494495164e-20) - 3.46859055451547e-16) - 3.29967008675989e-13) + 2.10839546065149e-10) + 1.39026436464115e-7;

    a3 = fs*(fs*(fs*(fs*(-2.92233252024476e-23*fs + 8.884494495164e-20) + 3.46859055451547e-16) - 3.29967008675989e-13) - 2.10839546065149e-10) + 1.39026436464115e-7;

    a4 = fs*(fs*(fs*(fs*(1.46116626012238e-23*fs - 1.3326741742746e-19) + 1.73429527725774e-16) + 1.64983504337994e-13) - 3.16259319097723e-10) + 6.95132182320574e-8;

    a5 = fs*(fs*(fs*(fs*(-2.92233252024476e-24*fs + 4.442247247582e-20) - 1.73429527725774e-16) + 1.64983504337994e-13) - 1.05419773032574e-10) + 1.39026436464115e-8;
};

p5 = pre : fi.iir((b0/a0,b1/a0,b2/a0,b3/a0,b4/a0,b5/a0),(a1/a0,a2/a0,a3/a0,a4/a0,a5/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;


    b0 = 8.60607537332906e-8*fs;

    b1 = 2.58182261199872e-7*fs;

    b2 = 1.72121507466581e-7*fs;

    b3 = -1.72121507466581e-7*fs;

    b4 = -2.58182261199872e-7*fs;

    b5 = -8.60607537332906e-8*fs;

    a0 = fs*(fs*(fs*(fs*(2.05029732339091e-24*fs + 5.87849767541672e-20) + 1.20685610628971e-15) + 1.21185035126741e-11) + 8.6068533907021e-8) + 4.30312374784857e-8;

    a1 = fs*(fs*(fs*(fs*(-1.02514866169546e-23*fs - 1.76354930262502e-19) - 1.20685610628971e-15) + 1.21185035126741e-11) + 2.58205601721063e-7) + 2.15156187392428e-7;

    a2 = fs*(fs*(fs*(fs*(2.05029732339091e-23*fs + 1.17569953508334e-19) - 2.41371221257942e-15) - 2.42370070253482e-11) + 1.72137067814042e-7) + 4.30312374784857e-7;

    a3 = fs*(fs*(fs*(fs*(-2.05029732339091e-23*fs + 1.17569953508334e-19) + 2.41371221257942e-15) - 2.42370070253482e-11) - 1.72137067814042e-7) + 4.30312374784857e-7;

    a4 = fs*(fs*(fs*(fs*(1.02514866169546e-23*fs - 1.76354930262502e-19) + 1.20685610628971e-15) + 1.21185035126741e-11) - 2.58205601721063e-7) + 2.15156187392428e-7;

    a5 = fs*(fs*(fs*(fs*(-2.05029732339091e-24*fs + 5.87849767541672e-20) - 1.20685610628971e-15) + 1.21185035126741e-11) - 8.6068533907021e-8) + 4.30312374784857e-8;
};

process =  p1 : p2 : p3 : p4 : p5 ;